const num: int :: 50000
var drawMain: wnd@Draw
func main()
	class Cmd()
		+var cmd: []char
		+var num: int
	end class
	var gra: dict<int, draw@Tex> :: #dict<int, draw@Tex>
	var snd: dict<int, snd@Snd> :: #dict<int, snd@Snd>
	do ogg@init()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %fix, 1280, 720, "SeisoHack")
	do @drawMain :: wnd@makeDraw(wndMain, 0, 0, 1280, 720, %fix, %fix, false)
	do wndMain.onActivate :: pop
	func pop(wnd: wnd@WndBase, a: bool, b: bool)
		if(a = true & b = false)
			do @drawMain.focus()
		end if
	end func
	do draw@sampler(%point)
	do @drawMain.focus()
	var handle: file@Reader :: file@makeReader("res/start.txt")
	do handle.delimiter("")
	var srcc: []char :: handle.readStr().replace("\n", "").replace("\t", "").replace("[-]", "z")
	do handle.fin()
	var lsrc: list<Cmd> :: #list<Cmd>
	var cnt: int :: 0
	while lp(cnt < ^srcc)
		var o: Cmd :: #Cmd
		do o.cmd :: srcc[cnt].toStr()
		if(o.cmd = "+" | o.cmd = "-" | o.cmd = "<" | o.cmd = ">" | o.cmd = ".")
			var pcnt: int :: 0
			while lp1(cnt + pcnt < ^srcc & srcc[cnt + pcnt].toStr() = o.cmd)
				do pcnt :+ 1
			end while
			do o.num :: pcnt
			do lsrc.add(o)
			do cnt :+ pcnt - 1
		else
			do lsrc.add(o)
		end if
		do cnt :+ 1
	end while
	
	var src: []Cmd :: lsrc.toArray()
	var jumpPos: []int :: #[^src]int
	
	for n(0, ^src - 1)
		if(src[n].cmd = "[")
			var pos: int :: n
			var m: int :: 0
			while lpp(true)
				if(pt >= ^src)
					ret
				end if
				if(src[pos].cmd = "[")
					do m :+ 1
				end if
				if(src[pos].cmd = "]")
					do m :- 1
				end if
				if(m = 0)
					do jumpPos[n] :: pos
					break lpp
				end if
				do pos :+ 1
			end while
		elif(src[n].cmd = "]")
			var pos: int :: n
			var m: int :: 0
			while lpp(true)
				if(pt < 0)
					ret
				end if
				if(src[pos].cmd = "]")
					do m :+ 1
				end if
				if(src[pos].cmd = "[")
					do m :- 1
				end if
				if(m = 0)
					do jumpPos[n] :: pos
					break lpp
				end if
				do pos :- 1
			end while
		end if
	end for
	var mem: []int :: #[@num]int
	var p: int :: 0
	var pt: int :: 0
	while lp(pt < ^src)
		switch(src[pt].cmd)
		case ">"
			do p :+ src[pt].num
			if(p >= @num)
				ret
			end if
		case "<"
			do p :- src[pt].num
			if(p < 0)
				ret
			end if
		case "+"
			do mem[p] :+ src[pt].num
		case "-"
			do mem[p] :- src[pt].num
		case "."
			do draw@render(60)
			if(dbg = true)
				do cui@print("\{mem[p]} ")
			end if
		case "@"
			switch(mem[p])
			case 0
				if(wnd@act() = false)
					ret
				end if
			case 1
				var o: draw@Tex :: gra.get(mem[p + 1], &)
				do o.draw(mem[p + 2] $ float, mem[p + 3] $ float, 0.0, 0.0, o.imgWidth() $ float, o.imgHeight() $ float, draw@white)
			case 2
				var o: snd@Snd :: snd.get(mem[p + 1], &)
				do o.setPos(0.0)
				do o.play()
			case 3
				if(mem[p + 1] = 0)
					do bgm@stop()
				else
					do bgm@play("res/mus/\{mem[p + 1]}.ogg", 0.0)
				end if
			case 4
				do gra.add(mem[p + 1], draw@makeTex("res/img/\{mem[p + 1]}.png"))
			case 5
				do snd.add(mem[p + 1], snd@makeSnd("res/se/\{mem[p + 1]}.wav"))
			end switch
		case ","
			var key: []input@PadBtn :: [%down $ input@PadBtn, %up, %left, %right, %a, %b, %c, %d, %e, %f]
			do mem[p] :: input@pad(0, key[mem[p]])
		case "["
			if(mem[p] = 0)
				do pt :: jumpPos[pt]
			end if
		case "]"
			do pt :: jumpPos[pt] - 1
		case "z"
			do mem[p] :: 0
		end switch
		do pt :+ 1
	end while
end func
